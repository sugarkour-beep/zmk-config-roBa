#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <1>;
    scroll-layers = <2>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 LC(K)>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        fn {
            bindings = <&kp ESC>;
            key-positions = <19 20>;
        };

        kakkoL {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 1>;
        };

        kakkoR {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
        };

        kakko2L {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <23 24>;
        };

        kakko2R {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <31 32>;
        };

        playpause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <18 19>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E     &kp R                   &kp T                                                      &kp Y        &kp U  &kp I      &kp O       &kp P
&kp A             &kp S         &kp D     &kp F                   &kp G        &trans                      &kp LC(UP_ARROW)  &kp H        &kp J  &lt 2 K    &kp L       &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C     &kp V                   &kp B        &kp B                       &kp B             &kp N        &kp M  &kp COMMA  &kp PERIOD  &kp SLASH
&kp LSHIFT        &kp LEFT_ALT  &kp LCMD  &lt_to_layer_0 3 LANG1  &lt 4 SPACE  &lt_to_layer_0 5 LANG2      &lt 5 BACKSPACE   &lt 4 ENTER                                &kp QUESTION
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        MOUSE {
            bindings = <
&kp Q       &kp W         &kp E     &kp R        &kp T                                           &kp Y        &kp U     &kp I      &kp O       &kp P
&kp A       &kp S         &kp D     &kp F        &kp G        &trans           &kp LC(UP_ARROW)  &kp H        &mkp MB1  &lt 2 K    &mkp MB3    &mkp MB2
&kp Z       &kp X         &kp C     &kp V        &kp B        &kp B            &kp B             &kp N        &kp M     &kp COMMA  &kp PERIOD  &kp SLASH
&kp LSHIFT  &kp LEFT_ALT  &kp LCMD  &lt 3 LANG1  &lt 4 SPACE  &lt 5 LANG2      &lt 5 BACKSPACE   &lt 4 ENTER                                   &kp QUESTION
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans            &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp LEFT_CONTROL  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans            &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                    &trans
            >;
        };

        cmd {
            bindings = <
&kp LG(Q)  &kp LG(W)  &kp LG(E)  &kp LG(R)  &trans                      &trans  &trans    &kp UP_ARROW  &trans     &trans
&kp LG(A)  &kp LG(S)  &kp LG(D)  &kp LG(F)  &trans  &trans      &trans  &kp J   &kp LEFT  &kp DOWN      &kp RIGHT  &kp L
&kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &trans  &trans      &trans  &trans  &trans    &trans        &trans     &trans
&trans     &trans     &trans     &trans     &trans  &trans      &trans  &trans                                     &trans
            >;
        };

        Num+ShortCut {
            bindings = <
&kp SLASH   &kp N7        &kp N8        &kp N9            &kp PLUS                                 &kp LG(LS(NUMBER_4))      &kp LG(R)          &kp LG(UP_ARROW)    &kp LG(Q)      &kp LS(LG(T))
&kp COLON   &kp NUMBER_4  &kp N5        &kp NUMBER_6      &kp MINUS  &trans            &trans      &kp LG(LS(LC(NUMBER_4)))  &kp LG(W)          &kp LG(LEFT_ARROW)  &kp LG(RIGHT)  &kp TILDE
&kp N0      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3      &kp EQUAL  &kp ASTERISK      &trans      &trans                    &kp C_VOLUME_DOWN  &kp LC(LS(TAB))     &kp LC(TAB)    &kp C_VOLUME_UP
&kp PERIOD  &kp AT_SIGN   &kp PERCENT   &kp LC(UP_ARROW)  &kp LC(K)  &kp TAB           &kp DELETE  &kp LS(ENTER)                                                                   &kp UNDERSCORE
            >;

            sensor-bindings = <&inc_dec_kp DOWN UP>;
        };

        Kigou+Allow {
            bindings = <
&kp SLASH        &kp LESS_THAN         &kp GREATER_THAN       &kp SQT            &kp PLUS                             &trans  &trans    &kp UP_ARROW  &trans     &trans
&kp COLON        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOUBLE_QUOTES  &kp MINUS  &trans            &trans  &kp J   &kp LEFT  &kp DOWN      &kp RIGHT  &kp L
&kp EXCLAMATION  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp HASH           &kp EQUAL  &kp ASTERISK      &trans  &trans  &trans    &trans        &trans     &trans
&kp AMPERSAND    &kp AT_SIGN           &kp PERCENT            &trans             &trans     &trans            &trans  &trans                                     &trans
            >;
        };
    };
};
